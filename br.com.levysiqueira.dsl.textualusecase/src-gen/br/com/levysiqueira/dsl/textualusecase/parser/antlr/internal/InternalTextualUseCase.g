/*
* generated by Xtext
*/
grammar InternalTextualUseCase;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.com.levysiqueira.dsl.textualusecase.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.com.levysiqueira.dsl.textualusecase.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.com.levysiqueira.dsl.textualusecase.services.TextualUseCaseGrammarAccess;

}

@parser::members {

 	private TextualUseCaseGrammarAccess grammarAccess;
 	
    public InternalTextualUseCaseParser(TokenStream input, TextualUseCaseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "UseCaseModel";	
   	}
   	
   	@Override
   	protected TextualUseCaseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleUseCaseModel
entryRuleUseCaseModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseCaseModelRule()); }
	 iv_ruleUseCaseModel=ruleUseCaseModel 
	 { $current=$iv_ruleUseCaseModel.current; } 
	 EOF 
;

// Rule UseCaseModel
ruleUseCaseModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseModelAccess().getSubjectSubjectParserRuleCall_0_0()); 
	    }
		lv_subject_0_0=ruleSubject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseModelRule());
	        }
       		set(
       			$current, 
       			"subject",
        		lv_subject_0_0, 
        		"Subject");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUseCaseModelAccess().getSemicolonKeyword_1());
    }
	otherlv_2='actors' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUseCaseModelAccess().getActorsKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUseCaseModelAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseModelAccess().getActorActorParserRuleCall_4_0()); 
	    }
		lv_actor_4_0=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseModelRule());
	        }
       		add(
       			$current, 
       			"actor",
        		lv_actor_4_0, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUseCaseModelAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseModelAccess().getActorActorParserRuleCall_5_1_0()); 
	    }
		lv_actor_6_0=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseModelRule());
	        }
       		add(
       			$current, 
       			"actor",
        		lv_actor_6_0, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUseCaseModelAccess().getRightCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseModelAccess().getUseCaseUseCaseParserRuleCall_7_0()); 
	    }
		lv_useCase_8_0=ruleUseCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseModelRule());
	        }
       		add(
       			$current, 
       			"useCase",
        		lv_useCase_8_0, 
        		"UseCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getActorAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSubject
entryRuleSubject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubjectRule()); }
	 iv_ruleSubject=ruleSubject 
	 { $current=$iv_ruleSubject.current; } 
	 EOF 
;

// Rule Subject
ruleSubject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='subject' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubjectAccess().getSubjectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubjectAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubjectRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUseCase
entryRuleUseCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseCaseRule()); }
	 iv_ruleUseCase=ruleUseCase 
	 { $current=$iv_ruleUseCase.current; } 
	 EOF 
;

// Rule UseCase
ruleUseCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='usecase' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUseCaseAccess().getUsecaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUseCaseAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='description' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUseCaseAccess().getDescriptionKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getDescriptionDescriptionParserRuleCall_4_0()); 
	    }
		lv_description_4_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_4_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUseCaseAccess().getSemicolonKeyword_5());
    }
	otherlv_6='actors' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUseCaseAccess().getActorsKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseCaseRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getActorActorCrossReference_7_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUseCaseAccess().getCommaKeyword_8_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseCaseRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getActorActorCrossReference_8_1_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getUseCaseAccess().getSemicolonKeyword_9());
    }
(	otherlv_11='preCondition' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getUseCaseAccess().getPreConditionKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getPreConditionConditionParserRuleCall_10_1_0()); 
	    }
		lv_preCondition_12_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseRule());
	        }
       		set(
       			$current, 
       			"preCondition",
        		lv_preCondition_12_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getUseCaseAccess().getSemicolonKeyword_10_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getBasicFlowBasicFlowParserRuleCall_11_0()); 
	    }
		lv_basicFlow_14_0=ruleBasicFlow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseRule());
	        }
       		set(
       			$current, 
       			"basicFlow",
        		lv_basicFlow_14_0, 
        		"BasicFlow");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getAlternativeFlowAlternativeFlowParserRuleCall_12_0()); 
	    }
		lv_alternativeFlow_15_0=ruleAlternativeFlow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseRule());
	        }
       		add(
       			$current, 
       			"alternativeFlow",
        		lv_alternativeFlow_15_0, 
        		"AlternativeFlow");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_16='postCondition' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getUseCaseAccess().getPostConditionKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseCaseAccess().getPostConditionConditionParserRuleCall_13_1_0()); 
	    }
		lv_postCondition_17_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseCaseRule());
	        }
       		set(
       			$current, 
       			"postCondition",
        		lv_postCondition_17_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=';' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getUseCaseAccess().getSemicolonKeyword_13_2());
    }
)?	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getUseCaseAccess().getRightCurlyBracketKeyword_14());
    }
)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getExpressionDescriptionParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBasicFlow
entryRuleBasicFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicFlowRule()); }
	 iv_ruleBasicFlow=ruleBasicFlow 
	 { $current=$iv_ruleBasicFlow.current; } 
	 EOF 
;

// Rule BasicFlow
ruleBasicFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'basic' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getBasicFlowAccess().getNameBasicKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicFlowRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "basic");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicFlowAccess().getStepsStepParserRuleCall_1_0()); 
	    }
		lv_steps_1_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicFlowRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_1_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='endbasic' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBasicFlowAccess().getEndbasicKeyword_2());
    }
)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStepAccess().getActionParserRuleCall_0()); 
    }
    this_Action_0=ruleAction
    { 
        $current = $this_Action_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStepAccess().getConditionalStatementParserRuleCall_1()); 
    }
    this_ConditionalStatement_1=ruleConditionalStatement
    { 
        $current = $this_ConditionalStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStepAccess().getLoopStatementParserRuleCall_2()); 
    }
    this_LoopStatement_2=ruleLoopStatement
    { 
        $current = $this_LoopStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStepAccess().getIncludeParserRuleCall_3()); 
    }
    this_Include_3=ruleInclude
    { 
        $current = $this_Include_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getNameStepOrderParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleStepOrder		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"StepOrder");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=')' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActionAccess().getRightParenthesisKeyword_1());
    }
	otherlv_2='action' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionAccess().getActionKeyword_2());
    }
	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActionAccess().getLeftSquareBracketKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getAgentAgentCrossReference_4_0()); 
	    }
		ruleName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getActionAccess().getRightSquareBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getDescriptionDescriptionParserRuleCall_6_0()); 
	    }
		lv_description_6_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_6_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getActionAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalStatementRule()); }
	 iv_ruleConditionalStatement=ruleConditionalStatement 
	 { $current=$iv_ruleConditionalStatement.current; } 
	 EOF 
;

// Rule ConditionalStatement
ruleConditionalStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalStatementAccess().getNameStepOrderParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleStepOrder		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"StepOrder");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=')' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalStatementAccess().getRightParenthesisKeyword_1());
    }
	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalStatementAccess().getIfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalStatementAccess().getConditionConditionParserRuleCall_3_0()); 
	    }
		lv_condition_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalStatementAccess().getThenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalStatementAccess().getStepsStepParserRuleCall_5_0()); 
	    }
		lv_steps_5_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_5_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='endif' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConditionalStatementAccess().getEndifKeyword_6());
    }
)
;





// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	 iv_ruleLoopStatement=ruleLoopStatement 
	 { $current=$iv_ruleLoopStatement.current; } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getNameStepOrderParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleStepOrder		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"StepOrder");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=')' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_1());
    }
	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopStatementAccess().getWhileKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getConditionConditionParserRuleCall_3_0()); 
	    }
		lv_condition_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopStatementAccess().getDoKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getStepsStepParserRuleCall_5_0()); 
	    }
		lv_steps_5_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_5_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='endwhile' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLoopStatementAccess().getEndwhileKeyword_6());
    }
)
;





// Entry rule entryRuleAlternativeFlow
entryRuleAlternativeFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeFlowRule()); }
	 iv_ruleAlternativeFlow=ruleAlternativeFlow 
	 { $current=$iv_ruleAlternativeFlow.current; } 
	 EOF 
;

// Rule AlternativeFlow
ruleAlternativeFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alternative' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativeFlowAccess().getAlternativeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeFlowAccess().getNameAlternativeFlowNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAlternativeFlowName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeFlowRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"AlternativeFlowName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='to step' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlternativeFlowAccess().getToStepKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlternativeFlowRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAlternativeFlowAccess().getBranchingStepStepCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='when' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAlternativeFlowAccess().getWhenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeFlowAccess().getConditionConditionParserRuleCall_5_0()); 
	    }
		lv_condition_5_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeFlowRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_5_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='then' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAlternativeFlowAccess().getThenKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeFlowAccess().getStepsStepParserRuleCall_7_0()); 
	    }
		lv_steps_7_0=ruleStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeFlowRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_7_0, 
        		"Step");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='endflow' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAlternativeFlowAccess().getEndflowKeyword_8());
    }
)
;





// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current; } 
	 EOF 
;

// Rule Include
ruleInclude returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIncludeAccess().getNameStepOrderParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleStepOrder		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIncludeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"StepOrder");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=')' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIncludeAccess().getRightParenthesisKeyword_1());
    }
	otherlv_2='include' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIncludeAccess().getIncludeKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getIncludeAccess().getUseCaseUseCaseCrossReference_3_0()); 
	}

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIncludeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleStepOrder
entryRuleStepOrder returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getStepOrderRule()); } 
	 iv_ruleStepOrder=ruleStepOrder 
	 { $current=$iv_ruleStepOrder.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule StepOrder
ruleStepOrder returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getStepOrderAccess().getINTTerminalRuleCall_0()); 
    }
)+
    |(    this_SINGLE_CHAR_1=RULE_SINGLE_CHAR    {
		$current.merge(this_SINGLE_CHAR_1);
    }

    { 
    newLeafNode(this_SINGLE_CHAR_1, grammarAccess.getStepOrderAccess().getSINGLE_CHARTerminalRuleCall_1()); 
    }
)+)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall()); 
    }
)+
    ;





// Entry rule entryRuleAlternativeFlowName
entryRuleAlternativeFlowName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeFlowNameRule()); } 
	 iv_ruleAlternativeFlowName=ruleAlternativeFlowName 
	 { $current=$iv_ruleAlternativeFlowName.current.getText(); }  
	 EOF 
;

// Rule AlternativeFlowName
ruleAlternativeFlowName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getAlternativeFlowNameAccess().getIDTerminalRuleCall()); 
    }
)+
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getAlternativeFlowNameParserRuleCall_0_0()); 
    }
    this_AlternativeFlowName_0=ruleAlternativeFlowName    {
		$current.merge(this_AlternativeFlowName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getStepOrderParserRuleCall_1()); 
    }
    this_StepOrder_2=ruleStepOrder    {
		$current.merge(this_StepOrder_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getStepOrderParserRuleCall_2_1()); 
    }
    this_StepOrder_4=ruleStepOrder    {
		$current.merge(this_StepOrder_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleDescription
entryRuleDescription returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); } 
	 iv_ruleDescription=ruleDescription 
	 { $current=$iv_ruleDescription.current.getText(); }  
	 EOF 
;

// Rule Description
ruleDescription returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDescriptionAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDescriptionAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_WS_2=RULE_WS    {
		$current.merge(this_WS_2);
    }

    { 
    newLeafNode(this_WS_2, grammarAccess.getDescriptionAccess().getWSTerminalRuleCall_2()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getFullStopKeyword_3()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getCommaKeyword_4()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getQuestionMarkKeyword_5()); 
    }

    |
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getApostropheKeyword_6()); 
    }

    |
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getQuotationMarkKeyword_7()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getHyphenMinusKeyword_8()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getPlusSignKeyword_9()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getEqualsSignKeyword_10()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getAsteriskKeyword_11()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getLessThanSignKeyword_12()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getGreaterThanSignKeyword_13()); 
    }

    |
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getLeftParenthesisKeyword_14()); 
    }

    |
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getRightParenthesisKeyword_15()); 
    }

    |
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getLeftCurlyBracketKeyword_16()); 
    }

    |
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getRightCurlyBracketKeyword_17()); 
    }

    |
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getCommercialAtKeyword_18()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().getPercentSignKeyword_19()); 
    }

    |
	kw='_' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDescriptionAccess().get_Keyword_20()); 
    }
)+
    ;







RULE_SINGLE_CHAR : 'a'..'z';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


