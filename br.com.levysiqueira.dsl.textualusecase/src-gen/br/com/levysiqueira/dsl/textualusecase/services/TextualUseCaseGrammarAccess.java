/*
* generated by Xtext
*/
package br.com.levysiqueira.dsl.textualusecase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TextualUseCaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UseCaseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseCaseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectSubjectParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActorsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActorActorParserRuleCall_4_0 = (RuleCall)cActorAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActorActorParserRuleCall_5_1_0 = (RuleCall)cActorAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cUseCaseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUseCaseUseCaseParserRuleCall_7_0 = (RuleCall)cUseCaseAssignment_7.eContents().get(0);
		
		/// ** TODO
		// * - special characters (ã, à etc.) - no name accepts	
		// * / UseCaseModel:
		//	subject=Subject ";" "actors" "{" actor+=Actor ("," actor+=Actor)* "}" useCase+=UseCase*;
		public ParserRule getRule() { return rule; }

		//subject=Subject ";" "actors" "{" actor+=Actor ("," actor+=Actor)* "}" useCase+=UseCase*
		public Group getGroup() { return cGroup; }

		//subject=Subject
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }

		//Subject
		public RuleCall getSubjectSubjectParserRuleCall_0_0() { return cSubjectSubjectParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//"actors"
		public Keyword getActorsKeyword_2() { return cActorsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//actor+=Actor
		public Assignment getActorAssignment_4() { return cActorAssignment_4; }

		//Actor
		public RuleCall getActorActorParserRuleCall_4_0() { return cActorActorParserRuleCall_4_0; }

		//("," actor+=Actor)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//actor+=Actor
		public Assignment getActorAssignment_5_1() { return cActorAssignment_5_1; }

		//Actor
		public RuleCall getActorActorParserRuleCall_5_1_0() { return cActorActorParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//useCase+=UseCase*
		public Assignment getUseCaseAssignment_7() { return cUseCaseAssignment_7; }

		//UseCase
		public RuleCall getUseCaseUseCaseParserRuleCall_7_0() { return cUseCaseUseCaseParserRuleCall_7_0; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Agents, Actors and Subject
		// * / Agent:
		//	Actor | Subject;
		public ParserRule getRule() { return rule; }

		//Actor | Subject
		public Alternatives getAlternatives() { return cAlternatives; }

		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }

		//Subject
		public RuleCall getSubjectParserRuleCall_1() { return cSubjectParserRuleCall_1; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Actor:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Subject:
		//	"subject" name=Name;
		public ParserRule getRule() { return rule; }

		//"subject" name=Name
		public Group getGroup() { return cGroup; }

		//"subject"
		public Keyword getSubjectKeyword_0() { return cSubjectKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}

	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsecaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cActorsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cActorActorCrossReference_7_0 = (CrossReference)cActorAssignment_7.eContents().get(0);
		private final RuleCall cActorActorNameParserRuleCall_7_0_1 = (RuleCall)cActorActorCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cActorAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cActorActorCrossReference_8_1_0 = (CrossReference)cActorAssignment_8_1.eContents().get(0);
		private final RuleCall cActorActorNameParserRuleCall_8_1_0_1 = (RuleCall)cActorActorCrossReference_8_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cPreConditionKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cPreConditionAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPreConditionConditionParserRuleCall_10_1_0 = (RuleCall)cPreConditionAssignment_10_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cBasicFlowAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cBasicFlowBasicFlowParserRuleCall_11_0 = (RuleCall)cBasicFlowAssignment_11.eContents().get(0);
		private final Assignment cAlternativeFlowAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cAlternativeFlowAlternativeFlowParserRuleCall_12_0 = (RuleCall)cAlternativeFlowAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cPostConditionKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cPostConditionAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cPostConditionConditionParserRuleCall_13_1_0 = (RuleCall)cPostConditionAssignment_13_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		/// **
		// * Use Case
		// * / UseCase:
		//	"usecase" name=Name "{" "description" description=Description ";" "actors" actor+=[Actor|Name] (","
		//	actor+=[Actor|Name])* ";" ("preCondition" preCondition=Condition ";")? basicFlow=BasicFlow
		//	alternativeFlow+=AlternativeFlow* ("postCondition" postCondition=Condition ";")? "}";
		public ParserRule getRule() { return rule; }

		//"usecase" name=Name "{" "description" description=Description ";" "actors" actor+=[Actor|Name] (","
		//actor+=[Actor|Name])* ";" ("preCondition" preCondition=Condition ";")? basicFlow=BasicFlow
		//alternativeFlow+=AlternativeFlow* ("postCondition" postCondition=Condition ";")? "}"
		public Group getGroup() { return cGroup; }

		//"usecase"
		public Keyword getUsecaseKeyword_0() { return cUsecaseKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"description"
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }

		//description=Description
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_4_0() { return cDescriptionDescriptionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"actors"
		public Keyword getActorsKeyword_6() { return cActorsKeyword_6; }

		//actor+=[Actor|Name]
		public Assignment getActorAssignment_7() { return cActorAssignment_7; }

		//[Actor|Name]
		public CrossReference getActorActorCrossReference_7_0() { return cActorActorCrossReference_7_0; }

		//Name
		public RuleCall getActorActorNameParserRuleCall_7_0_1() { return cActorActorNameParserRuleCall_7_0_1; }

		//("," actor+=[Actor|Name])*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//actor+=[Actor|Name]
		public Assignment getActorAssignment_8_1() { return cActorAssignment_8_1; }

		//[Actor|Name]
		public CrossReference getActorActorCrossReference_8_1_0() { return cActorActorCrossReference_8_1_0; }

		//Name
		public RuleCall getActorActorNameParserRuleCall_8_1_0_1() { return cActorActorNameParserRuleCall_8_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//("preCondition" preCondition=Condition ";")?
		public Group getGroup_10() { return cGroup_10; }

		//"preCondition"
		public Keyword getPreConditionKeyword_10_0() { return cPreConditionKeyword_10_0; }

		//preCondition=Condition
		public Assignment getPreConditionAssignment_10_1() { return cPreConditionAssignment_10_1; }

		//Condition
		public RuleCall getPreConditionConditionParserRuleCall_10_1_0() { return cPreConditionConditionParserRuleCall_10_1_0; }

		//";"
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }

		//basicFlow=BasicFlow
		public Assignment getBasicFlowAssignment_11() { return cBasicFlowAssignment_11; }

		//BasicFlow
		public RuleCall getBasicFlowBasicFlowParserRuleCall_11_0() { return cBasicFlowBasicFlowParserRuleCall_11_0; }

		//alternativeFlow+=AlternativeFlow*
		public Assignment getAlternativeFlowAssignment_12() { return cAlternativeFlowAssignment_12; }

		//AlternativeFlow
		public RuleCall getAlternativeFlowAlternativeFlowParserRuleCall_12_0() { return cAlternativeFlowAlternativeFlowParserRuleCall_12_0; }

		//("postCondition" postCondition=Condition ";")?
		public Group getGroup_13() { return cGroup_13; }

		//"postCondition"
		public Keyword getPostConditionKeyword_13_0() { return cPostConditionKeyword_13_0; }

		//postCondition=Condition
		public Assignment getPostConditionAssignment_13_1() { return cPostConditionAssignment_13_1; }

		//Condition
		public RuleCall getPostConditionConditionParserRuleCall_13_1_0() { return cPostConditionConditionParserRuleCall_13_1_0; }

		//";"
		public Keyword getSemicolonKeyword_13_2() { return cSemicolonKeyword_13_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionDescriptionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		/// **
		// * For now it is a simple String... But someday it can be another language!
		// * / Condition:
		//	expression=Description;
		public ParserRule getRule() { return rule; }

		//expression=Description
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Description
		public RuleCall getExpressionDescriptionParserRuleCall_0() { return cExpressionDescriptionParserRuleCall_0; }
	}

	public class BasicFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBasicKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		private final Keyword cEndbasicKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// **
		// * Flows
		// * / BasicFlow:
		//	name="basic" steps+=Step+ "endbasic";
		public ParserRule getRule() { return rule; }

		//name="basic" steps+=Step+ "endbasic"
		public Group getGroup() { return cGroup; }

		//name="basic"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"basic"
		public Keyword getNameBasicKeyword_0_0() { return cNameBasicKeyword_0_0; }

		//steps+=Step+
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//Step
		public RuleCall getStepsStepParserRuleCall_1_0() { return cStepsStepParserRuleCall_1_0; }

		//"endbasic"
		public Keyword getEndbasicKeyword_2() { return cEndbasicKeyword_2; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncludeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Step:
		//	Action | ConditionalStatement | LoopStatement | Include;
		public ParserRule getRule() { return rule; }

		//Action | ConditionalStatement | LoopStatement | Include
		public Alternatives getAlternatives() { return cAlternatives; }

		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }

		//ConditionalStatement
		public RuleCall getConditionalStatementParserRuleCall_1() { return cConditionalStatementParserRuleCall_1; }

		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_2() { return cLoopStatementParserRuleCall_2; }

		//Include
		public RuleCall getIncludeParserRuleCall_3() { return cIncludeParserRuleCall_3; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStepOrderParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAgentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAgentAgentCrossReference_4_0 = (CrossReference)cAgentAssignment_4.eContents().get(0);
		private final RuleCall cAgentAgentNameParserRuleCall_4_0_1 = (RuleCall)cAgentAgentCrossReference_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDescriptionParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Action:
		//	name=StepOrder ")" "action" "[" agent=[Agent|Name] "]" description=Description ";";
		public ParserRule getRule() { return rule; }

		//name=StepOrder ")" "action" "[" agent=[Agent|Name] "]" description=Description ";"
		public Group getGroup() { return cGroup; }

		//name=StepOrder
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//StepOrder
		public RuleCall getNameStepOrderParserRuleCall_0_0() { return cNameStepOrderParserRuleCall_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }

		//"action"
		public Keyword getActionKeyword_2() { return cActionKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//agent=[Agent|Name]
		public Assignment getAgentAssignment_4() { return cAgentAssignment_4; }

		//[Agent|Name]
		public CrossReference getAgentAgentCrossReference_4_0() { return cAgentAgentCrossReference_4_0; }

		//Name
		public RuleCall getAgentAgentNameParserRuleCall_4_0_1() { return cAgentAgentNameParserRuleCall_4_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//description=Description
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_6_0() { return cDescriptionDescriptionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStepOrderParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConditionalStatement:
		//	name=StepOrder ")" "if" condition=Condition "then" steps+=Step+ "endif";
		public ParserRule getRule() { return rule; }

		//name=StepOrder ")" "if" condition=Condition "then" steps+=Step+ "endif"
		public Group getGroup() { return cGroup; }

		//name=StepOrder
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//StepOrder
		public RuleCall getNameStepOrderParserRuleCall_0_0() { return cNameStepOrderParserRuleCall_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }

		//"if"
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//steps+=Step+
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }

		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }

		//"endif"
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}

	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStepOrderParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Keyword cEndwhileKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LoopStatement:
		//	name=StepOrder ")" "while" condition=Condition "do" steps+=Step+ "endwhile";
		public ParserRule getRule() { return rule; }

		//name=StepOrder ")" "while" condition=Condition "do" steps+=Step+ "endwhile"
		public Group getGroup() { return cGroup; }

		//name=StepOrder
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//StepOrder
		public RuleCall getNameStepOrderParserRuleCall_0_0() { return cNameStepOrderParserRuleCall_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//steps+=Step+
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }

		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }

		//"endwhile"
		public Keyword getEndwhileKeyword_6() { return cEndwhileKeyword_6; }
	}

	public class AlternativeFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAlternativeFlowNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cToStepKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBranchingStepAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBranchingStepStepCrossReference_3_0 = (CrossReference)cBranchingStepAssignment_3.eContents().get(0);
		private final RuleCall cBranchingStepStepQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cBranchingStepStepCrossReference_3_0.eContents().get(1);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionConditionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStepsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStepsStepParserRuleCall_7_0 = (RuleCall)cStepsAssignment_7.eContents().get(0);
		private final Keyword cEndflowKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AlternativeFlow:
		//	"alternative" name=AlternativeFlowName "to step" branchingStep=[Step|QualifiedName] "when" condition=Condition "then"
		//	steps+=Step+ "endflow";
		public ParserRule getRule() { return rule; }

		//"alternative" name=AlternativeFlowName "to step" branchingStep=[Step|QualifiedName] "when" condition=Condition "then"
		//steps+=Step+ "endflow"
		public Group getGroup() { return cGroup; }

		//"alternative"
		public Keyword getAlternativeKeyword_0() { return cAlternativeKeyword_0; }

		//name=AlternativeFlowName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AlternativeFlowName
		public RuleCall getNameAlternativeFlowNameParserRuleCall_1_0() { return cNameAlternativeFlowNameParserRuleCall_1_0; }

		//"to step"
		public Keyword getToStepKeyword_2() { return cToStepKeyword_2; }

		//branchingStep=[Step|QualifiedName]
		public Assignment getBranchingStepAssignment_3() { return cBranchingStepAssignment_3; }

		//[Step|QualifiedName]
		public CrossReference getBranchingStepStepCrossReference_3_0() { return cBranchingStepStepCrossReference_3_0; }

		//QualifiedName
		public RuleCall getBranchingStepStepQualifiedNameParserRuleCall_3_0_1() { return cBranchingStepStepQualifiedNameParserRuleCall_3_0_1; }

		//"when"
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }

		//condition=Condition
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_5_0() { return cConditionConditionParserRuleCall_5_0; }

		//"then"
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }

		//steps+=Step+
		public Assignment getStepsAssignment_7() { return cStepsAssignment_7; }

		//Step
		public RuleCall getStepsStepParserRuleCall_7_0() { return cStepsStepParserRuleCall_7_0; }

		//"endflow"
		public Keyword getEndflowKeyword_8() { return cEndflowKeyword_8; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStepOrderParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIncludeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUseCaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cUseCaseUseCaseCrossReference_3_0 = (CrossReference)cUseCaseAssignment_3.eContents().get(0);
		private final RuleCall cUseCaseUseCaseIDTerminalRuleCall_3_0_1 = (RuleCall)cUseCaseUseCaseCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Include:
		//	name=StepOrder ")" "include" useCase=[UseCase] ";";
		public ParserRule getRule() { return rule; }

		//name=StepOrder ")" "include" useCase=[UseCase] ";"
		public Group getGroup() { return cGroup; }

		//name=StepOrder
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//StepOrder
		public RuleCall getNameStepOrderParserRuleCall_0_0() { return cNameStepOrderParserRuleCall_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }

		//"include"
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }

		//useCase=[UseCase]
		public Assignment getUseCaseAssignment_3() { return cUseCaseAssignment_3; }

		//[UseCase]
		public CrossReference getUseCaseUseCaseCrossReference_3_0() { return cUseCaseUseCaseCrossReference_3_0; }

		//ID
		public RuleCall getUseCaseUseCaseIDTerminalRuleCall_3_0_1() { return cUseCaseUseCaseIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class StepOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepOrder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSINGLE_CHARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Support
		// * / StepOrder returns ecore::EString hidden():
		//	INT+ | SINGLE_CHAR+;
		public ParserRule getRule() { return rule; }

		//INT+ | SINGLE_CHAR+
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT+
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//SINGLE_CHAR+
		public RuleCall getSINGLE_CHARTerminalRuleCall_1() { return cSINGLE_CHARTerminalRuleCall_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name returns ecore::EString:
		//	ID+;
		public ParserRule getRule() { return rule; }

		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class AlternativeFlowNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeFlowName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AlternativeFlowName returns ecore::EString:
		//	ID+;
		public ParserRule getRule() { return rule; }

		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cAlternativeFlowNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStepOrderParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cStepOrderParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	(AlternativeFlowName ".")? StepOrder ("." StepOrder)*;
		public ParserRule getRule() { return rule; }

		//(AlternativeFlowName ".")? StepOrder ("." StepOrder)*
		public Group getGroup() { return cGroup; }

		//(AlternativeFlowName ".")?
		public Group getGroup_0() { return cGroup_0; }

		//AlternativeFlowName
		public RuleCall getAlternativeFlowNameParserRuleCall_0_0() { return cAlternativeFlowNameParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//StepOrder
		public RuleCall getStepOrderParserRuleCall_1() { return cStepOrderParserRuleCall_1; }

		//("." StepOrder)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//StepOrder
		public RuleCall getStepOrderParserRuleCall_2_1() { return cStepOrderParserRuleCall_2_1; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cQuestionMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cApostropheKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cQuotationMarkKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cHyphenMinusKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPlusSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAsteriskKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLessThanSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cGreaterThanSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLeftParenthesisKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cLeftCurlyBracketKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cCommercialAtKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cPercentSignKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword c_Keyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//// Other
		//Description returns ecore::EString:
		//	(INT // Punctuation
		//	// Operators
		//	// Parenthesis
		//	| ID | WS | "." | "," | "?" | "\'" | "\"" | "-" | "+" | "=" | "*" | "<" | ">" | "(" | ")" | "{" | "}" | "@" | "%" |
		//	"_")+;
		public ParserRule getRule() { return rule; }

		//(INT // Punctuation
		//// Operators
		//// Parenthesis
		//| ID | WS | "." | "," | "?" | "\'" | "\"" | "-" | "+" | "=" | "*" | "<" | ">" | "(" | ")" | "{" | "}" | "@" | "%" |
		//"_")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"?"
		public Keyword getQuestionMarkKeyword_5() { return cQuestionMarkKeyword_5; }

		//"\'"
		public Keyword getApostropheKeyword_6() { return cApostropheKeyword_6; }

		//"\""
		public Keyword getQuotationMarkKeyword_7() { return cQuotationMarkKeyword_7; }

		//"-"
		public Keyword getHyphenMinusKeyword_8() { return cHyphenMinusKeyword_8; }

		//"+"
		public Keyword getPlusSignKeyword_9() { return cPlusSignKeyword_9; }

		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }

		//"*"
		public Keyword getAsteriskKeyword_11() { return cAsteriskKeyword_11; }

		//"<"
		public Keyword getLessThanSignKeyword_12() { return cLessThanSignKeyword_12; }

		//">"
		public Keyword getGreaterThanSignKeyword_13() { return cGreaterThanSignKeyword_13; }

		//"("
		public Keyword getLeftParenthesisKeyword_14() { return cLeftParenthesisKeyword_14; }

		//")"
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_16() { return cLeftCurlyBracketKeyword_16; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }

		//"@"
		public Keyword getCommercialAtKeyword_18() { return cCommercialAtKeyword_18; }

		//"%"
		public Keyword getPercentSignKeyword_19() { return cPercentSignKeyword_19; }

		//"_"
		public Keyword get_Keyword_20() { return c_Keyword_20; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private UseCaseModelElements pUseCaseModel;
	private AgentElements pAgent;
	private ActorElements pActor;
	private SubjectElements pSubject;
	private UseCaseElements pUseCase;
	private ConditionElements pCondition;
	private BasicFlowElements pBasicFlow;
	private StepElements pStep;
	private ActionElements pAction;
	private ConditionalStatementElements pConditionalStatement;
	private LoopStatementElements pLoopStatement;
	private AlternativeFlowElements pAlternativeFlow;
	private IncludeElements pInclude;
	private StepOrderElements pStepOrder;
	private NameElements pName;
	private AlternativeFlowNameElements pAlternativeFlowName;
	private QualifiedNameElements pQualifiedName;
	private DescriptionElements pDescription;
	private EIntElements pEInt;
	private TerminalRule tSINGLE_CHAR;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TextualUseCaseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.com.levysiqueira.dsl.textualusecase.TextualUseCase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// ** TODO
	// * - special characters (ã, à etc.) - no name accepts	
	// * / UseCaseModel:
	//	subject=Subject ";" "actors" "{" actor+=Actor ("," actor+=Actor)* "}" useCase+=UseCase*;
	public UseCaseModelElements getUseCaseModelAccess() {
		return (pUseCaseModel != null) ? pUseCaseModel : (pUseCaseModel = new UseCaseModelElements());
	}
	
	public ParserRule getUseCaseModelRule() {
		return getUseCaseModelAccess().getRule();
	}

	/// **
	// * Agents, Actors and Subject
	// * / Agent:
	//	Actor | Subject;
	public AgentElements getAgentAccess() {
		return (pAgent != null) ? pAgent : (pAgent = new AgentElements());
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Actor:
	//	name=Name;
	public ActorElements getActorAccess() {
		return (pActor != null) ? pActor : (pActor = new ActorElements());
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Subject:
	//	"subject" name=Name;
	public SubjectElements getSubjectAccess() {
		return (pSubject != null) ? pSubject : (pSubject = new SubjectElements());
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}

	/// **
	// * Use Case
	// * / UseCase:
	//	"usecase" name=Name "{" "description" description=Description ";" "actors" actor+=[Actor|Name] (","
	//	actor+=[Actor|Name])* ";" ("preCondition" preCondition=Condition ";")? basicFlow=BasicFlow
	//	alternativeFlow+=AlternativeFlow* ("postCondition" postCondition=Condition ";")? "}";
	public UseCaseElements getUseCaseAccess() {
		return (pUseCase != null) ? pUseCase : (pUseCase = new UseCaseElements());
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}

	/// **
	// * For now it is a simple String... But someday it can be another language!
	// * / Condition:
	//	expression=Description;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	/// **
	// * Flows
	// * / BasicFlow:
	//	name="basic" steps+=Step+ "endbasic";
	public BasicFlowElements getBasicFlowAccess() {
		return (pBasicFlow != null) ? pBasicFlow : (pBasicFlow = new BasicFlowElements());
	}
	
	public ParserRule getBasicFlowRule() {
		return getBasicFlowAccess().getRule();
	}

	//Step:
	//	Action | ConditionalStatement | LoopStatement | Include;
	public StepElements getStepAccess() {
		return (pStep != null) ? pStep : (pStep = new StepElements());
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//Action:
	//	name=StepOrder ")" "action" "[" agent=[Agent|Name] "]" description=Description ";";
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ConditionalStatement:
	//	name=StepOrder ")" "if" condition=Condition "then" steps+=Step+ "endif";
	public ConditionalStatementElements getConditionalStatementAccess() {
		return (pConditionalStatement != null) ? pConditionalStatement : (pConditionalStatement = new ConditionalStatementElements());
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}

	//LoopStatement:
	//	name=StepOrder ")" "while" condition=Condition "do" steps+=Step+ "endwhile";
	public LoopStatementElements getLoopStatementAccess() {
		return (pLoopStatement != null) ? pLoopStatement : (pLoopStatement = new LoopStatementElements());
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}

	//AlternativeFlow:
	//	"alternative" name=AlternativeFlowName "to step" branchingStep=[Step|QualifiedName] "when" condition=Condition "then"
	//	steps+=Step+ "endflow";
	public AlternativeFlowElements getAlternativeFlowAccess() {
		return (pAlternativeFlow != null) ? pAlternativeFlow : (pAlternativeFlow = new AlternativeFlowElements());
	}
	
	public ParserRule getAlternativeFlowRule() {
		return getAlternativeFlowAccess().getRule();
	}

	//Include:
	//	name=StepOrder ")" "include" useCase=[UseCase] ";";
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	/// **
	// * Support
	// * / StepOrder returns ecore::EString hidden():
	//	INT+ | SINGLE_CHAR+;
	public StepOrderElements getStepOrderAccess() {
		return (pStepOrder != null) ? pStepOrder : (pStepOrder = new StepOrderElements());
	}
	
	public ParserRule getStepOrderRule() {
		return getStepOrderAccess().getRule();
	}

	//Name returns ecore::EString:
	//	ID+;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//AlternativeFlowName returns ecore::EString:
	//	ID+;
	public AlternativeFlowNameElements getAlternativeFlowNameAccess() {
		return (pAlternativeFlowName != null) ? pAlternativeFlowName : (pAlternativeFlowName = new AlternativeFlowNameElements());
	}
	
	public ParserRule getAlternativeFlowNameRule() {
		return getAlternativeFlowNameAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	(AlternativeFlowName ".")? StepOrder ("." StepOrder)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// Other
	//Description returns ecore::EString:
	//	(INT // Punctuation
	//	// Operators
	//	// Parenthesis
	//	| ID | WS | "." | "," | "?" | "\'" | "\"" | "-" | "+" | "=" | "*" | "<" | ">" | "(" | ")" | "{" | "}" | "@" | "%" |
	//	"_")+;
	public DescriptionElements getDescriptionAccess() {
		return (pDescription != null) ? pDescription : (pDescription = new DescriptionElements());
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal SINGLE_CHAR:
	//	"a".."z";
	public TerminalRule getSINGLE_CHARRule() {
		return (tSINGLE_CHAR != null) ? tSINGLE_CHAR : (tSINGLE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_CHAR"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
